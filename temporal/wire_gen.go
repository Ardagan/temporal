// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package temporal

import (
	"github.com/google/wire"
	"github.com/urfave/cli/v2"
	"go.temporal.io/server/common/log"
)

// Injectors from wire.go:

func InitializeServer(c *cli.Context) (*Server, error) {
	config, err := DefaultConfigProvider(c)
	if err != nil {
		return nil, err
	}
	logger := DefaultLogger(config)
	serviceNamesList := DefaultServiceNameListProvider(logger, c)
	authorizer, err := DefaultAuthorizerProvider(config)
	if err != nil {
		return nil, err
	}
	claimMapper, err := DefaultClaimMapper(config, logger)
	if err != nil {
		return nil, err
	}
	client := DefaultDynamicConfigClientProvider(config, logger)
	collection := DefaultDynamicConfigCollectionProvider(client, logger)
	abstractDataStoreFactory := DefaultDatastoreFactory()
	metricsReporters, err := DefaultMetricsReportersProvider(config, logger)
	if err != nil {
		return nil, err
	}
	tlsConfigProvider, err := DefaultTLSConfigProvider(config, logger, metricsReporters)
	if err != nil {
		return nil, err
	}
	jwtAudienceMapper := DefaultAudienceGetterProvider()
	serviceResolver := DefaultPersistenseServiceResolverProvider()
	visibilityWritingMode, err := AdvancedVisibilityWritingModeProvider(config, collection)
	if err != nil {
		return nil, err
	}
	dataStore, err := AdvancedVisibilityStoreProvider(config, visibilityWritingMode)
	if err != nil {
		return nil, err
	}
	elasticsearch := ESConfigProvider(dataStore)
	esHttpClient, err := DefaultElasticSearchHttpClientProvider(elasticsearch)
	if err != nil {
		return nil, err
	}
	clientClient, err := ESClientProvider(config, logger, esHttpClient, serviceResolver, elasticsearch, visibilityWritingMode)
	if err != nil {
		return nil, err
	}
	servicesProviderDeps := &ServicesProviderDeps{
		cfg:                        config,
		services:                   serviceNamesList,
		logger:                     logger,
		namespaceLogger:            logger,
		authorizer:                 authorizer,
		claimMapper:                claimMapper,
		dynamicConfigClient:        client,
		dynamicConfigCollection:    collection,
		customDatastoreFactory:     abstractDataStoreFactory,
		metricReporters:            metricsReporters,
		tlsConfigProvider:          tlsConfigProvider,
		audienceGetter:             jwtAudienceMapper,
		persistenceServiceResolver: serviceResolver,
		esConfig:                   elasticsearch,
		esClient:                   clientClient,
	}
	v, err := ServicesProvider(servicesProviderDeps)
	if err != nil {
		return nil, err
	}
	serverInterruptCh := DefaultInterruptChProvider()
	server, err := ServerProvider(logger, config, serviceNamesList, v, serviceResolver, abstractDataStoreFactory, client, collection, serverInterruptCh)
	if err != nil {
		return nil, err
	}
	return server, nil
}

// wire.go:

func InitializeDefaultUserProviderSet(c *cli.Context) wire.ProviderSet {
	return wire.NewSet(
		DefaultConfigProvider,
		DefaultLogger,
		DefaultDynamicConfigClientProvider,
		DefaultAuthorizerProvider,
		DefaultClaimMapper,
		DefaultServiceNameListProvider,
		DefaultDatastoreFactory,
		DefaultMetricsReportersProvider,
		DefaultTLSConfigProvider,
		DefaultDynamicConfigCollectionProvider,
		DefaultAudienceGetterProvider,
		DefaultPersistenseServiceResolverProvider,
		DefaultElasticSearchHttpClientProvider,
	)
}

var UserSet = wire.NewSet(
	DefaultConfigProvider,
	DefaultLogger, wire.Bind(new(NamespaceLogger), new(log.Logger)), DefaultDynamicConfigClientProvider,
	DefaultAuthorizerProvider,
	DefaultClaimMapper,
	DefaultServiceNameListProvider,
	DefaultDatastoreFactory,
	DefaultMetricsReportersProvider,
	DefaultTLSConfigProvider,
	DefaultDynamicConfigCollectionProvider,
	DefaultAudienceGetterProvider,
	DefaultPersistenseServiceResolverProvider,
	DefaultElasticSearchHttpClientProvider,
	DefaultInterruptChProvider,
)

var serverSet = wire.NewSet(
	ServicesProvider,
	ServerProvider,
	AdvancedVisibilityStoreProvider,
	ESClientProvider,
	ESConfigProvider,
	AdvancedVisibilityWritingModeProvider, wire.Struct(new(ServicesProviderDeps), "*"),
)
